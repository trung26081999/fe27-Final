{"ast":null,"code":"import { delay, put, takeEvery } from 'redux-saga/effects';\nimport { AuthAPI } from '../../api';\nimport { fetchUserRegisterAction, fetchUserRegisterActionFailed, fetchUserRegisterActionSuccess, loginAction, loginActionFailed, loginActionSuccess, // logoutAction, \n// logoutActionFailed, \n// logoutActionSuccess, \nregisterAction, registerActionFailed, registerActionSuccess } from '../slices/user.slice.js';\n\nfunction* login(action) {\n  try {\n    // console.log(\"payload\",action.payload);\n    const loginPayload = action.payload;\n    const response = yield AuthAPI.login({\n      email: loginPayload.email,\n      password: loginPayload.password\n    });\n    const token = response.data.accessToken;\n    const user = response.data.user; // console.log(\"response\",token,user);\n\n    yield put(loginActionSuccess({\n      token,\n      user\n    })); // console.log(\"token\",response.data.accessToken);\n  } catch (e) {\n    yield put(loginActionFailed(e.response.data));\n  }\n}\n\nfunction* register(action) {\n  try {\n    const registerPayload = action.payload;\n    const response = yield AuthAPI.register({\n      email: registerPayload.email,\n      password: registerPayload.password,\n      address: registerPayload.address,\n      phone: registerPayload.phone,\n      lastName: registerPayload.lastName,\n      firstName: registerPayload.firstName,\n      date: registerPayload.date,\n      gender: registerPayload.gender\n    });\n    yield put(registerActionSuccess(response.data.user));\n  } catch (e) {\n    console.log(\"error\", e);\n    yield put(registerActionFailed(e.response.data));\n  }\n}\n\nfunction* fetchUserRegister(action) {\n  try {\n    yield delay(1000);\n    const response = yield AuthAPI.fetchUserRegister(action.payload);\n    const productData = response.data;\n    const totalProduct = response.headers[\"x-total-count\"]; // Put 1 action đã được định nghĩa ở slice\n\n    yield put(fetchUserRegisterActionSuccess({\n      data: productData,\n      totalProduct: totalProduct\n    }));\n  } catch (e) {\n    // Put 1 action đã được định nghĩa ở slice\n    yield put(fetchUserRegisterActionFailed(e.response.data));\n  }\n}\n\nexport function* userSaga() {\n  yield takeEvery(loginAction, login);\n  yield takeEvery(registerAction, register);\n  yield takeEvery(fetchUserRegisterAction, fetchUserRegister);\n}","map":{"version":3,"names":["delay","put","takeEvery","AuthAPI","fetchUserRegisterAction","fetchUserRegisterActionFailed","fetchUserRegisterActionSuccess","loginAction","loginActionFailed","loginActionSuccess","registerAction","registerActionFailed","registerActionSuccess","login","action","loginPayload","payload","response","email","password","token","data","accessToken","user","e","register","registerPayload","address","phone","lastName","firstName","date","gender","console","log","fetchUserRegister","productData","totalProduct","headers","userSaga"],"sources":["/Users/luongvantrung/Dropbox/Dropbox/Mac/Desktop/Final-project-fe27/src/stores/sagas/user.saga.js"],"sourcesContent":["import {\n    delay,\n    put,\n    takeEvery\n} from 'redux-saga/effects';\nimport { AuthAPI } from '../../api';\nimport {\n    fetchUserRegisterAction, fetchUserRegisterActionFailed, fetchUserRegisterActionSuccess, loginAction,\n    loginActionFailed,\n    loginActionSuccess,\n    // logoutAction, \n    // logoutActionFailed, \n    // logoutActionSuccess, \n    registerAction,\n    registerActionFailed,\n    registerActionSuccess\n} from '../slices/user.slice.js';\n\nfunction* login(action) {\n    try {\n        // console.log(\"payload\",action.payload);\n        const loginPayload = action.payload;\n        const response = yield AuthAPI.login({\n            email: loginPayload.email,\n            password: loginPayload.password,\n        });\n        const token = response.data.accessToken;\n        const user = response.data.user;\n        // console.log(\"response\",token,user);\n        yield put(loginActionSuccess({token, user}));\n        // console.log(\"token\",response.data.accessToken);\n    } catch (e) {\n        yield put(loginActionFailed(e.response.data));\n    }\n}\n\nfunction* register(action) {\n    try {\n        const registerPayload = action.payload;\n\n        const response = yield AuthAPI.register({\n            email: registerPayload.email,\n            password: registerPayload.password,\n            address: registerPayload.address,\n            phone: registerPayload.phone,\n            lastName: registerPayload.lastName,\n            firstName: registerPayload.firstName,\n            date: registerPayload.date,\n            gender: registerPayload.gender,\n        });\n        yield put(registerActionSuccess(response.data.user));\n    } catch (e) {\n        console.log(\"error\", e);\n        yield put(registerActionFailed(e.response.data));\n    }\n}\n\nfunction* fetchUserRegister(action) {\n    try {\n        yield delay(1000);\n        const response = yield AuthAPI.fetchUserRegister(action.payload);\n        const productData = response.data;\n        const totalProduct = response.headers[\"x-total-count\"];\n\n        // Put 1 action đã được định nghĩa ở slice\n        yield put(\n            fetchUserRegisterActionSuccess({\n                data: productData,\n                totalProduct: totalProduct,\n            })\n        );\n    } catch (e) {\n        // Put 1 action đã được định nghĩa ở slice\n        yield put(fetchUserRegisterActionFailed(e.response.data));\n    }\n}\nexport function* userSaga() {\n    yield takeEvery(loginAction, login);\n    yield takeEvery(registerAction, register);\n    yield takeEvery(fetchUserRegisterAction, fetchUserRegister);\n}"],"mappings":"AAAA,SACIA,KADJ,EAEIC,GAFJ,EAGIC,SAHJ,QAIO,oBAJP;AAKA,SAASC,OAAT,QAAwB,WAAxB;AACA,SACIC,uBADJ,EAC6BC,6BAD7B,EAC4DC,8BAD5D,EAC4FC,WAD5F,EAEIC,iBAFJ,EAGIC,kBAHJ,EAII;AACA;AACA;AACAC,cAPJ,EAQIC,oBARJ,EASIC,qBATJ,QAUO,yBAVP;;AAYA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;EACpB,IAAI;IACA;IACA,MAAMC,YAAY,GAAGD,MAAM,CAACE,OAA5B;IACA,MAAMC,QAAQ,GAAG,MAAMd,OAAO,CAACU,KAAR,CAAc;MACjCK,KAAK,EAAEH,YAAY,CAACG,KADa;MAEjCC,QAAQ,EAAEJ,YAAY,CAACI;IAFU,CAAd,CAAvB;IAIA,MAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAT,CAAcC,WAA5B;IACA,MAAMC,IAAI,GAAGN,QAAQ,CAACI,IAAT,CAAcE,IAA3B,CARA,CASA;;IACA,MAAMtB,GAAG,CAACQ,kBAAkB,CAAC;MAACW,KAAD;MAAQG;IAAR,CAAD,CAAnB,CAAT,CAVA,CAWA;EACH,CAZD,CAYE,OAAOC,CAAP,EAAU;IACR,MAAMvB,GAAG,CAACO,iBAAiB,CAACgB,CAAC,CAACP,QAAF,CAAWI,IAAZ,CAAlB,CAAT;EACH;AACJ;;AAED,UAAUI,QAAV,CAAmBX,MAAnB,EAA2B;EACvB,IAAI;IACA,MAAMY,eAAe,GAAGZ,MAAM,CAACE,OAA/B;IAEA,MAAMC,QAAQ,GAAG,MAAMd,OAAO,CAACsB,QAAR,CAAiB;MACpCP,KAAK,EAAEQ,eAAe,CAACR,KADa;MAEpCC,QAAQ,EAAEO,eAAe,CAACP,QAFU;MAGpCQ,OAAO,EAAED,eAAe,CAACC,OAHW;MAIpCC,KAAK,EAAEF,eAAe,CAACE,KAJa;MAKpCC,QAAQ,EAAEH,eAAe,CAACG,QALU;MAMpCC,SAAS,EAAEJ,eAAe,CAACI,SANS;MAOpCC,IAAI,EAAEL,eAAe,CAACK,IAPc;MAQpCC,MAAM,EAAEN,eAAe,CAACM;IARY,CAAjB,CAAvB;IAUA,MAAM/B,GAAG,CAACW,qBAAqB,CAACK,QAAQ,CAACI,IAAT,CAAcE,IAAf,CAAtB,CAAT;EACH,CAdD,CAcE,OAAOC,CAAP,EAAU;IACRS,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,CAArB;IACA,MAAMvB,GAAG,CAACU,oBAAoB,CAACa,CAAC,CAACP,QAAF,CAAWI,IAAZ,CAArB,CAAT;EACH;AACJ;;AAED,UAAUc,iBAAV,CAA4BrB,MAA5B,EAAoC;EAChC,IAAI;IACA,MAAMd,KAAK,CAAC,IAAD,CAAX;IACA,MAAMiB,QAAQ,GAAG,MAAMd,OAAO,CAACgC,iBAAR,CAA0BrB,MAAM,CAACE,OAAjC,CAAvB;IACA,MAAMoB,WAAW,GAAGnB,QAAQ,CAACI,IAA7B;IACA,MAAMgB,YAAY,GAAGpB,QAAQ,CAACqB,OAAT,CAAiB,eAAjB,CAArB,CAJA,CAMA;;IACA,MAAMrC,GAAG,CACLK,8BAA8B,CAAC;MAC3Be,IAAI,EAAEe,WADqB;MAE3BC,YAAY,EAAEA;IAFa,CAAD,CADzB,CAAT;EAMH,CAbD,CAaE,OAAOb,CAAP,EAAU;IACR;IACA,MAAMvB,GAAG,CAACI,6BAA6B,CAACmB,CAAC,CAACP,QAAF,CAAWI,IAAZ,CAA9B,CAAT;EACH;AACJ;;AACD,OAAO,UAAUkB,QAAV,GAAqB;EACxB,MAAMrC,SAAS,CAACK,WAAD,EAAcM,KAAd,CAAf;EACA,MAAMX,SAAS,CAACQ,cAAD,EAAiBe,QAAjB,CAAf;EACA,MAAMvB,SAAS,CAACE,uBAAD,EAA0B+B,iBAA1B,CAAf;AACH"},"metadata":{},"sourceType":"module"}